### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccountInfo {
  accountHolder: String!
  accountNumber: String!
  bankName: String!
}

type Admin {
  createdAt: DateTime!
  id: Int!
  loginId: String!
  state: AdminState!
}

input AdminOrderByWithRelationInput {
  createdAt: SortOrder
  createdToken: SortOrder
  id: SortOrder
  loginId: SortOrder
  password: SortOrder
  product: ProductOrderByRelationAggregateInput
  state: SortOrder
  token: SortOrder
}

enum AdminState {
  ACTIVE
  DELETED
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  createdAt: DateTimeFilter
  createdToken: DateTimeNullableFilter
  id: IntFilter
  loginId: StringFilter
  password: StringFilter
  product: ProductListRelationFilter
  state: EnumAdminStateFilter
  token: StringNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type CategoryInfoA001 {
  activeSillDataA001: [SillInfoA001!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA001: SillInfoA001!
}

input CategoryInfoA001ListRelationFilter {
  every: CategoryInfoA001WhereInput
  none: CategoryInfoA001WhereInput
  some: CategoryInfoA001WhereInput
}

input CategoryInfoA001OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA001OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA001: SillInfoA001OrderByWithRelationInput
}

type CategoryInfoA001Type {
  code: String!
  name: String!
}

input CategoryInfoA001WhereInput {
  AND: [CategoryInfoA001WhereInput!]
  NOT: [CategoryInfoA001WhereInput!]
  OR: [CategoryInfoA001WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA001: SillInfoA001WhereInput
}

type CategoryInfoA006 {
  activeSillDataA006: [SillInfoA006!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA006: SillInfoA006!
}

input CategoryInfoA006ListRelationFilter {
  every: CategoryInfoA006WhereInput
  none: CategoryInfoA006WhereInput
  some: CategoryInfoA006WhereInput
}

input CategoryInfoA006OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA006OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA006: SillInfoA006OrderByWithRelationInput
}

type CategoryInfoA006Type {
  code: String!
  name: String!
}

input CategoryInfoA006WhereInput {
  AND: [CategoryInfoA006WhereInput!]
  NOT: [CategoryInfoA006WhereInput!]
  OR: [CategoryInfoA006WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA006: SillInfoA006WhereInput
}

type CategoryInfoA027 {
  activeSillDataA027: [SillInfoA027!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA027: SillInfoA027!
}

input CategoryInfoA027ListRelationFilter {
  every: CategoryInfoA027WhereInput
  none: CategoryInfoA027WhereInput
  some: CategoryInfoA027WhereInput
}

input CategoryInfoA027OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA027OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA027: SillInfoA027OrderByWithRelationInput
}

type CategoryInfoA027Type {
  code: String!
  name: String!
}

input CategoryInfoA027WhereInput {
  AND: [CategoryInfoA027WhereInput!]
  NOT: [CategoryInfoA027WhereInput!]
  OR: [CategoryInfoA027WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA027: SillInfoA027WhereInput
}

type CategoryInfoA077 {
  activeSillDataA077: [SillInfoA077!]!
  categoryInfoA001: CategoryInfoA001!
  categoryInfoA006: CategoryInfoA006!
  categoryInfoA027: CategoryInfoA027!
  categoryInfoA112: CategoryInfoA112!
  categoryInfoA113: CategoryInfoA113!
  categoryInfoA524: CategoryInfoA524!
  categoryInfoA525: CategoryInfoA525!
  categoryInfoB378: CategoryInfoB378!
  categoryInfoB719: CategoryInfoB719!
  categoryInfoB956: CategoryInfoB956!
  code: String!
  codeA001: String!
  codeA006: String!
  codeA027: String!
  codeA112: String!
  codeA113: String!
  codeA524: String!
  codeA525: String!
  codeB378: String!
  codeB719: String!
  codeB956: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA077: SillInfoA077!
}

input CategoryInfoA077ListRelationFilter {
  every: CategoryInfoA077WhereInput
  none: CategoryInfoA077WhereInput
  some: CategoryInfoA077WhereInput
}

input CategoryInfoA077OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA077OrderByWithRelationInput {
  categoryInfoA001: CategoryInfoA001OrderByWithRelationInput
  categoryInfoA006: CategoryInfoA006OrderByWithRelationInput
  categoryInfoA027: CategoryInfoA027OrderByWithRelationInput
  categoryInfoA112: CategoryInfoA112OrderByWithRelationInput
  categoryInfoA113: CategoryInfoA113OrderByWithRelationInput
  categoryInfoA524: CategoryInfoA524OrderByWithRelationInput
  categoryInfoA525: CategoryInfoA525OrderByWithRelationInput
  categoryInfoB378: CategoryInfoB378OrderByWithRelationInput
  categoryInfoB719: CategoryInfoB719OrderByWithRelationInput
  categoryInfoB956: CategoryInfoB956OrderByWithRelationInput
  code: SortOrder
  codeA001: SortOrder
  codeA006: SortOrder
  codeA027: SortOrder
  codeA112: SortOrder
  codeA113: SortOrder
  codeA524: SortOrder
  codeA525: SortOrder
  codeB378: SortOrder
  codeB719: SortOrder
  codeB956: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA077: SillInfoA077OrderByWithRelationInput
}

type CategoryInfoA077Type {
  code: String!
  name: String!
}

input CategoryInfoA077WhereInput {
  AND: [CategoryInfoA077WhereInput!]
  NOT: [CategoryInfoA077WhereInput!]
  OR: [CategoryInfoA077WhereInput!]
  categoryInfoA001: CategoryInfoA001WhereInput
  categoryInfoA006: CategoryInfoA006WhereInput
  categoryInfoA027: CategoryInfoA027WhereInput
  categoryInfoA112: CategoryInfoA112WhereInput
  categoryInfoA113: CategoryInfoA113WhereInput
  categoryInfoA524: CategoryInfoA524WhereInput
  categoryInfoA525: CategoryInfoA525WhereInput
  categoryInfoB378: CategoryInfoB378WhereInput
  categoryInfoB719: CategoryInfoB719WhereInput
  categoryInfoB956: CategoryInfoB956WhereInput
  code: StringFilter
  codeA001: StringFilter
  codeA006: StringFilter
  codeA027: StringFilter
  codeA112: StringFilter
  codeA113: StringFilter
  codeA524: StringFilter
  codeA525: StringFilter
  codeB378: StringFilter
  codeB719: StringFilter
  codeB956: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA077: SillInfoA077WhereInput
}

type CategoryInfoA112 {
  activeSillDataA112: [SillInfoA112!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA112: SillInfoA112!
}

input CategoryInfoA112ListRelationFilter {
  every: CategoryInfoA112WhereInput
  none: CategoryInfoA112WhereInput
  some: CategoryInfoA112WhereInput
}

input CategoryInfoA112OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA112OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA112: SillInfoA112OrderByWithRelationInput
}

type CategoryInfoA112Type {
  code: String!
  name: String!
}

input CategoryInfoA112WhereInput {
  AND: [CategoryInfoA112WhereInput!]
  NOT: [CategoryInfoA112WhereInput!]
  OR: [CategoryInfoA112WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA112: SillInfoA112WhereInput
}

type CategoryInfoA113 {
  activeSillDataA113: [SillInfoA113!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA113: SillInfoA113!
}

input CategoryInfoA113ListRelationFilter {
  every: CategoryInfoA113WhereInput
  none: CategoryInfoA113WhereInput
  some: CategoryInfoA113WhereInput
}

input CategoryInfoA113OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA113OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA113: SillInfoA113OrderByWithRelationInput
}

type CategoryInfoA113Type {
  code: String!
  name: String!
}

input CategoryInfoA113WhereInput {
  AND: [CategoryInfoA113WhereInput!]
  NOT: [CategoryInfoA113WhereInput!]
  OR: [CategoryInfoA113WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA113: SillInfoA113WhereInput
}

type CategoryInfoA524 {
  activeSillDataA524: [SillInfoA524!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA524: SillInfoA524!
}

input CategoryInfoA524ListRelationFilter {
  every: CategoryInfoA524WhereInput
  none: CategoryInfoA524WhereInput
  some: CategoryInfoA524WhereInput
}

input CategoryInfoA524OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA524OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA524: SillInfoA524OrderByWithRelationInput
}

type CategoryInfoA524Type {
  code: String!
  name: String!
}

input CategoryInfoA524WhereInput {
  AND: [CategoryInfoA524WhereInput!]
  NOT: [CategoryInfoA524WhereInput!]
  OR: [CategoryInfoA524WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA524: SillInfoA524WhereInput
}

type CategoryInfoA525 {
  activeSillDataA525: [SillInfoA525!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoA525: SillInfoA525!
}

input CategoryInfoA525ListRelationFilter {
  every: CategoryInfoA525WhereInput
  none: CategoryInfoA525WhereInput
  some: CategoryInfoA525WhereInput
}

input CategoryInfoA525OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoA525OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoA525: SillInfoA525OrderByWithRelationInput
}

type CategoryInfoA525Type {
  code: String!
  name: String!
}

input CategoryInfoA525WhereInput {
  AND: [CategoryInfoA525WhereInput!]
  NOT: [CategoryInfoA525WhereInput!]
  OR: [CategoryInfoA525WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoA525: SillInfoA525WhereInput
}

type CategoryInfoB378 {
  activeSillDataB378: [SillInfoB378!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoB378: SillInfoB378!
}

input CategoryInfoB378ListRelationFilter {
  every: CategoryInfoB378WhereInput
  none: CategoryInfoB378WhereInput
  some: CategoryInfoB378WhereInput
}

input CategoryInfoB378OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoB378OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  codeA077: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoB378: SillInfoB378OrderByWithRelationInput
}

type CategoryInfoB378Type {
  code: String!
  name: String!
}

input CategoryInfoB378WhereInput {
  AND: [CategoryInfoB378WhereInput!]
  NOT: [CategoryInfoB378WhereInput!]
  OR: [CategoryInfoB378WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  codeA077: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoB378: SillInfoB378WhereInput
}

type CategoryInfoB719 {
  activeSillDataB719: [SillInfoB719!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoB719: SillInfoB719!
}

input CategoryInfoB719ListRelationFilter {
  every: CategoryInfoB719WhereInput
  none: CategoryInfoB719WhereInput
  some: CategoryInfoB719WhereInput
}

input CategoryInfoB719OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoB719OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoB719: SillInfoB719OrderByWithRelationInput
}

type CategoryInfoB719Type {
  code: String!
  name: String!
}

input CategoryInfoB719WhereInput {
  AND: [CategoryInfoB719WhereInput!]
  NOT: [CategoryInfoB719WhereInput!]
  OR: [CategoryInfoB719WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoB719: SillInfoB719WhereInput
}

type CategoryInfoB956 {
  activeSillDataB956: [SillInfoB956!]!
  code: String!
  depth1: String!
  depth2: String!
  depth3: String!
  depth4: String!
  depth5: String!
  depth6: String!
  id: Int!
  name: String!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  sillCode: String!
  sillInfoB956: SillInfoB956!
}

input CategoryInfoB956ListRelationFilter {
  every: CategoryInfoB956WhereInput
  none: CategoryInfoB956WhereInput
  some: CategoryInfoB956WhereInput
}

input CategoryInfoB956OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input CategoryInfoB956OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  depth1: SortOrder
  depth2: SortOrder
  depth3: SortOrder
  depth4: SortOrder
  depth5: SortOrder
  depth6: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByRelationAggregateInput
  sillCode: SortOrder
  sillInfoB956: SillInfoB956OrderByWithRelationInput
}

type CategoryInfoB956Type {
  code: String!
  name: String!
}

input CategoryInfoB956WhereInput {
  AND: [CategoryInfoB956WhereInput!]
  NOT: [CategoryInfoB956WhereInput!]
  OR: [CategoryInfoB956WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  depth1: StringFilter
  depth2: StringFilter
  depth3: StringFilter
  depth4: StringFilter
  depth5: StringFilter
  depth6: StringFilter
  id: IntFilter
  name: StringFilter
  product: ProductListRelationFilter
  sillCode: StringFilter
  sillInfoB956: SillInfoB956WhereInput
}

type CategoryInformationType {
  categoryInfoA001: CategoryInfoA001Type
  categoryInfoA006: CategoryInfoA006Type
  categoryInfoA027: CategoryInfoA027Type
  categoryInfoA112: CategoryInfoA112Type
  categoryInfoA113: CategoryInfoA113Type
  categoryInfoA524: CategoryInfoA524Type
  categoryInfoA525: CategoryInfoA525Type
  categoryInfoB378: CategoryInfoB378Type
  categoryInfoB719: CategoryInfoB719Type
  categoryInfoB956: CategoryInfoB956Type
  code: String!
  code_a001: String
  code_a006: String
  code_a027: String
  code_a077: String
  code_a112: String
  code_a113: String
  code_a524: String
  code_a525: String
  code_b378: String
  code_b719: String
  code_b956: String
  depth1: String
  depth2: String
  depth3: String
  depth4: String
  depth5: String
  depth6: String
  id: String
  name: String!
}

type CategorySelectType {
  code: String!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DescriptionDataInput {
  description: String!
  productId: Int!
}

input EnumAdminStateFilter {
  equals: AdminState
  in: [AdminState!]
  not: NestedEnumAdminStateFilter
  notIn: [AdminState!]
}

input EnumPurchaseLogStateFilter {
  equals: PurchaseLogState
  in: [PurchaseLogState!]
  not: NestedEnumPurchaseLogStateFilter
  notIn: [PurchaseLogState!]
}

input EnumPurchaseLogTypeFilter {
  equals: PurchaseLogType
  in: [PurchaseLogType!]
  not: NestedEnumPurchaseLogTypeFilter
  notIn: [PurchaseLogType!]
}

input EnumUserStateFilter {
  equals: UserState
  in: [UserState!]
  not: NestedEnumUserStateFilter
  notIn: [UserState!]
}

enum ExcelSampleEnum {
  COLLECT_PRODUCT
  DENY_WORD
  REPLACE_WORD
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  EditPassword(checkNewPassword: String!, email: String!, newPassword: String!, verificationNumber: String!): String!
  EditPasswordCreateVerification(email: String!, phoneNumber: String!): String!
  ProductOptionNameSwap(data: [ProductOptionNameSwapInput!]!): Boolean!
  ProductOptionValueSwap(data: [ProductOptionValueSwapInput!]!): Boolean!
  addWordByExcelByUser(data: Upload!, isReplace: Boolean!): Boolean!
  addWordByUser(findWord: String!, replaceWord: String): Boolean!
  cancelPurchasePlanByUser(merchantUid: String!): Boolean!
  cardPayTest(email: String!): String!
  changeMyPasswordByAdmin(currentPassword: String!, newPassword: String!): Boolean!
  changePasswordByUser(currentPassword: String!, newPassword: String!): Boolean!
  connectSocialIdByUser(socialId: String!, userType: UserSocialType!): User!
  coupangCategorySillCodeInput(data: [sillCodeInput!]!): String!
  createNewOrder(data: [newOrderInput!]!): Int!
  createNoticeByAdmin(attachment: Upload, content: String!, title: String!): Boolean!
  createUserQuestionByUser(attachment: [Upload!], content: String!, title: String!): Boolean!
  deleteNoticeByAdmin(noticeIds: [Int!]!): Int!
  deleteProductByAdmin(productId: [Int!]!): Boolean!
  deleteProductByUser(productId: [Int!]!): Boolean!
  deleteStore(id: Int!, store: String!): Boolean!
  deleteUserByAdmin(userId: [Int!]!): Boolean!
  deleteUserProductByAdmin(userId: [Int!]!): Boolean!
  deleteWordByUser(wordId: [Int!]!): Boolean!
  disableUserOption(id: Int!): Boolean!
  endProductSellStateByAdmin(productIds: [Int!]!): Int!
  endProductSellStateByUser(productIds: [Int!]!): Int!
  extendMyAccountByUser(masterId: Int!, slaveIds: [Int!]!): Boolean!
  findEmail(phone: String!, verificationNumber: String!): String!
  findEmailCreateVerification(phoneNumber: String!): String!
  getProductListAllKeys: Boolean!
  getTaobaoItemUsingExtensionByUser(data: String!): String!
  initProductDescriptionByUser(productId: Int!): String
  initProductImageByUser(productId: Int!): String
  initProductOptionImageByUser(productId: Int!): String
  initProductThumbnailImageByUser(productId: Int!): String
  invalidatePurchaseInfoByAdmin(purchaseLogId: Int!): Boolean!
  modifyWordByUser(findWord: String!, replaceWord: String, wordId: Int!): Boolean!
  purchasePlanByUser(merchantUid: String!, planInfoId: Int!): Int!
  requestPhoneVerificationByEveryone(phoneNumber: String!): Boolean!
  restoreProductOptionValue(productOptionNameId: Int!): String!
  selectProductViewLogByUser(timeEnd: String!, timeStart: String!): String!
  selectProductViewLogDateByUser(timeEnd: String!, timeStart: String!): String!
  setMaxProductLimitByAdmin(
    """미설정시 무제한"""
    productLimit: Int
    userId: Int!
  ): Boolean!
  setMultiPurchaseInfoByAdmin(credit: Int!, purchaseInputs: [purchaseInputs!]!): Boolean!
  setProductOptionNameBySomeOne(isActive: Boolean!, name: String!, productOptionNameId: Int!): Boolean!
  setProductOptionValueBySomeOne(image: String, isActive: Boolean!, name: String, newImage: Upload, productOptionNameId: Int, productOptionValueId: Int): String!
  setPurchaseInfoByAdmin(expiredAt: DateTime, planInfoId: Int!, userId: Int!): Boolean!
  setUserStopTest(userId: Int!): Boolean!
  signInAdminByEveryone(
    id: String!

    """소셜의 경우 그냥 빈 문자열"""
    password: String!
  ): SignInType!
  signInUserByEveryone(
    email: String!

    """소셜의 경우 그냥 빈 문자열"""
    password: String!
    userType: UserSocialType!
  ): SignInType!
  signOutUserByEveryone: String!
  signUpAdminByAdmin(id: String!, password: String!): Boolean!
  signUpUserByEveryone2(email: String!, password: String!, phone: String!, refCode: String, verificationId: Int! = 0): String!
  silentRefreshToken(refreshToken: String!): SignInType
  t_createProduct: Boolean
  testAddjobCallBack(response: String!): Boolean!
  testProductStoreCnt(productId: Int!, siteCode: String!): String!
  transferProductsToUserByAdmin(productIds: [Int!]!, targetUserId: Int!): String!
  translateProductTextByUser(id: Int!, type: TranslateTargetEnumType!): String!
  translateProductsTextByUser(ids: [Int!]!, type: TranslateTargetEnumType!): String!
  unlinkProductStore(productId: Int!, siteCode: String!): Boolean!
  updateCnyRateByAdmin(cnyRate: Float!): Float!
  updateDescription(description: String!, productId: Int!): String!
  updateFreeUserDayLimitByAdmin(day: Int!): Int!
  updateFreeUserProductLimitByAdmin(day: Int!): Int!
  updateImageThumbnailData(productId: Int!, thumbnails: [ProductThumbnailUpdateInput!]): String!
  updateManyDescription(data: [DescriptionDataInput!]!): String!
  updateManyProductAttributeByUser(brandName: String, manufacturer: String, modelName: String, productId: [Int!]!): String!
  updateManyProductCategoryByAdmin(categoryA001: String, categoryA006: String, categoryA027: String, categoryA077: String, categoryA112: String, categoryB378: String, productIds: [Int!]!): Int!
  updateManyProductCategoryByUser(categoryA001: String, categoryA006: String, categoryA027: String, categoryA077: String, categoryA112: String, categoryA113: String, categoryA524: String, categoryA525: String, categoryB378: String, categoryB719: String, categoryB956: String, productIds: [Int!]!): Int!
  updateManyProductFee(auctionFee: Float, coupangFee: Float, gmarketFee: Float, interparkFee: Float, lotteonFee: Float, lotteonNormalFee: Float, naverFee: Float, productId: [Int!]!, streetFee: Float, streetNormalFee: Float, tmonFee: Float, wemakepriceFee: Float): String!
  updateManyProductNameByUser(body: String, head: String, productIds: [Int!]!, tail: String): String!
  updateManyProductOption(data: [ProductOptionInput!]!): String!
  updateManyProductOptionValue(data: [ProductOptionValueInput!]!): String!
  updateManyProductSiilInfoByAdmin(productIds: [Int!]!, siilCode: String!): Int!
  updateManyProductSiilInfoByUser(productIds: [Int!]!, siilCode: String!): Int!
  updateManyProductTagByUser(immSearchTags: String, productIds: [Int!]!, searchTags: String): String!
  updateMultipleProductNameByUser(data: [ProductOptionNameInput!]!): String!
  updateMyDataByUser(additionalShippingFeeJeju: Int, asInformation: String, asTel: String, auctionFee: Float, auctionUseType: String, autoPrice: String, calculateWonType: String, cnyRate: Float, cnyRateDollar: Float, cnyRateEuro: Float, cnyRateYen: Float, collectCheckPosition: String, collectStock: Int, collectTimeout: Int, coupangAccessKey: String, coupangDefaultInbound: String, coupangDefaultOutbound: String, coupangFee: Float, coupangImageOpt: String, coupangLoginId: String, coupangMaximumBuyForPerson: Int, coupangOutboundShippingTimeDay: Int, coupangSecretKey: String, coupangUnionDeliveryType: String, coupangUseType: String, coupangVendorId: String, defaultPrice: String, defaultShippingFee: Int, descriptionShowTitle: String, discountAmount: Int, discountUnitType: String, esmplusAuctionId: String, esmplusGmarketId: String, esmplusMasterId: String, exchangeShippingFee: Int, extraShippingFee: Int, fixImageBottom: Upload, fixImageSubBottom: Upload, fixImageSubTop: Upload, fixImageTop: Upload, gmarketFee: Float, gmarketUseType: String, interparkCertKey: String, interparkEditCertKey: String, interparkEditSecretKey: String, interparkFee: Float, interparkSecretKey: String, interparkUseType: String, lotteonApiKey: String, lotteonFee: Float, lotteonNormalFee: Float, lotteonNormalUseType: String, lotteonSellerType: String, lotteonUseType: String, lotteonVendorId: String, marginRate: Float, marginUnitType: String, naverAutoSearchTag: String, naverFee: Float, naverOrigin: String, naverOriginCode: String, naverStoreOnly: String, naverStoreUrl: String, naverUseType: String, optionAlignTop: String, optionIndexType: Int, optionTwoWays: String, orderToDeliveryMembership: String, orderToDeliveryMethod: String, orderToDeliveryName: String, refundShippingFee: Int, sillFromCategory: String, streetApiKey: String, streetApiKey2: String, streetApiKey3: String, streetApiKey4: String, streetApiMemo: String, streetApiMemo2: String, streetApiMemo3: String, streetApiMemo4: String, streetDefaultInbound: String, streetDefaultOutbound: String, streetFee: Float, streetNormalApiKey: String, streetNormalApiKey2: String, streetNormalApiKey3: String, streetNormalApiKey4: String, streetNormalApiMemo: String, streetNormalApiMemo2: String, streetNormalApiMemo3: String, streetNormalApiMemo4: String, streetNormalFee: Float, streetNormalInbound: String, streetNormalOutbound: String, streetNormalUseKeyType: String, streetNormalUseType: String, streetUseKeyType: String, streetUseType: String, thumbnailRepresentNo: String, tmonFee: Float, tmonId: String, tmonUseType: String, useDetailInformation: String, wemakepriceFee: Float, wemakepriceId: String, wemakepriceUseType: String): Boolean!
  updateMyImageByUser(fixImageBottom: String, fixImageSubBottom: String, fixImageSubTop: String, fixImageTop: String): Boolean!
  updateNewProductImageBySomeone(description: String, optionValues: [ProductOptionValueImageUpdateInput!]!, productId: Int!, thumbnails: [ProductNewThumbnailImageUpdateInput!]): String!
  updateNoticeByAdmin(attachment: Upload, content: String, noticeId: Int!, title: String): Boolean!
  updatePhoneByUser(phone: String!, verificationId: Int!): Boolean!
  updatePlanInfoByAdmin(description: String, isActive: Boolean, name: String, planId: Int!, price: Int): PlanInfo!
  updateProductAttributeByUser(brandName: String, manufacturer: String, modelName: String, productId: Int!): String!
  updateProductByAdmin(categoryCode: String, description: String, localShippingFee: Int, name: String, optionNames: [ProductOptionNameUpdateInput!]!, optionValues: [ProductOptionValueUpdateInput!]!, options: [ProductOptionUpdateInput!]!, price: Int, productId: Int!, shippingFee: Int, siilCode: String, siilData: [SiilInput!], thumbnails: [ProductThumbnailUpdateInput!]): Product!
  updateProductByUser(categoryA001: String, categoryA006: String, categoryA027: String, categoryA077: String, categoryA112: String, categoryA113: String, categoryA524: String, categoryA525: String, categoryB378: String, categoryB719: String, categoryB956: String, categoryCode: String, description: String, localShippingCode: Int, localShippingFee: Int, name: String, optionNames: [ProductOptionNameUpdateInput!]!, optionValues: [ProductOptionValueUpdateInput!]!, options: [ProductOptionUpdateInput!]!, price: Int, productId: Int!, shippingFee: Int, siilCode: String, siilData: [SiilInput!], thumbnails: [ProductThumbnailUpdateInput!]): Product!
  updateProductCategory(categoryA001: String, categoryA006: String, categoryA027: String, categoryA077: String, categoryA112: String, categoryA113: String, categoryA524: String, categoryA525: String, categoryB378: String, categoryB719: String, categoryB956: String, categoryCode: String, productId: Int!): String!
  updateProductCategory2(categoryA001: String, categoryA006: String, categoryA027: String, categoryA077: String, categoryA112: String, categoryA113: String, categoryA524: String, categoryA525: String, categoryB378: String, categoryB719: String, categoryB956: String, categoryCode: String, productId: Int!): String!
  updateProductFee(auctionFee: Float, coupangFee: Float, gmarketFee: Float, interparkFee: Float, lotteonFee: Float, lotteonNormalFee: Float, naverFee: Float, productId: Int!, streetFee: Float, streetNormalFee: Float, tmonFee: Float, wemakepriceFee: Float): String!
  updateProductImageBySomeone(description: String, optionValues: [ProductOptionValueImageUpdateInput!]!, productId: Int!, thumbnails: [ProductThumbnailImageUpdateInput!]): Product!
  updateProductImageBySomeone2(description: String, optionValues: [ProductOptionValueImageUpdateInput!]!, productId: Int!, thumbnails: [ProductThumbnailImageUpdateInput!]): String!
  updateProductNameByAdmin(name: String!, productId: Int!): String!
  updateProductNameByUser(name: String!, productId: Int!): String!
  updateProductOption(id: Int!, productOption: [setProductOption!]!): [Int!]!
  updateProductOptionShippingFee(defaultShippingFee: Int!, productOptionId: Int!): String
  updateProductPriceByAdmin(
    cnyRate: Float!
    localShippingCode: Int

    """해외배송비(배대지배송비)"""
    localShippingFee: Int!
    marginRate: Float!
    marginUnitType: String!
    productIds: [Int!]!

    """유료배송비"""
    shippingFee: Int!
  ): Int!
  updateProductPriceByUser(
    cnyRate: Float!
    localShippingCode: Int

    """해외배송비(배대지배송비)"""
    localShippingFee: Int!
    marginRate: Float!
    marginUnitType: String!
    productIds: [Int!]!

    """유료배송비"""
    shippingFee: Int!
  ): Int!
  updateProductSillCodesByUser(code_a001: String, code_a006: String, code_a027: String, code_a077: String, code_a112: String, code_a113: String, code_a524: String, code_a525: String, code_b378: String, code_b719: String, code_b956: String, productIds: [Int!]!): String
  updateProductSillDatasByUser(data_a001: String, data_a006: String, data_a027: String, data_a077: String, data_a112: String, data_a113: String, data_a524: String, data_a525: String, data_b378: String, data_b719: String, data_b956: String, productIds: [Int!]!): String
  updateProductSinglePriceByUser(price: Int!, productId: Int!): String!
  updateProductStoreUrlInfoBySomeone(productStoreId: Int!, storeProductId: String!): String!
  updateProductTagByUser(immSearchTags: String, productId: Int!, searchTags: String): String!
  updateTaobaoRefreshDayByAdmin(day: Int!): Int!
  updateUserQuestionByAdmin(answer: String!, userQuestionId: Int!): Boolean!
  verifyPhoneByEveryone(phoneNumber: String!, verificationNumber: String!): String!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumAdminStateFilter {
  equals: AdminState
  in: [AdminState!]
  not: NestedEnumAdminStateFilter
  notIn: [AdminState!]
}

input NestedEnumPurchaseLogStateFilter {
  equals: PurchaseLogState
  in: [PurchaseLogState!]
  not: NestedEnumPurchaseLogStateFilter
  notIn: [PurchaseLogState!]
}

input NestedEnumPurchaseLogTypeFilter {
  equals: PurchaseLogType
  in: [PurchaseLogType!]
  not: NestedEnumPurchaseLogTypeFilter
  notIn: [PurchaseLogType!]
}

input NestedEnumUserStateFilter {
  equals: UserState
  in: [UserState!]
  not: NestedEnumUserStateFilter
  notIn: [UserState!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Notice {
  attachmentFile: String
  content: String!
  contentSummary(wordCount: Int): String!
  createdAt: DateTime!
  id: Int!
  isVisible: Boolean!
  title: String!
  viewCount: Int!
}

input NoticeOrderByWithRelationInput {
  attachmentFile: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isVisible: SortOrder
  title: SortOrder
  viewCount: SortOrder
}

input NoticeWhereInput {
  AND: [NoticeWhereInput!]
  NOT: [NoticeWhereInput!]
  OR: [NoticeWhereInput!]
  attachmentFile: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isVisible: BoolFilter
  title: StringFilter
  viewCount: IntFilter
}

input NoticeWhereUniqueInput {
  id: Int
}

input OrderListRelationFilter {
  every: orderWhereInput
  none: orderWhereInput
  some: orderWhereInput
}

type PhoneVerification {
  createdAt: DateTime!
  id: Int!
  tel: String!
  used: Int
  verificationNumber: String!
}

type PlanInfo {
  description: String!
  externalFeatureVariableId: String
  id: Int!
  isActive: Boolean!
  month: Int!
  name: String!
  planLevel: Int
  price: Int!
}

input PlanInfoOrderByWithRelationInput {
  description: SortOrder
  externalFeatureVariableId: SortOrder
  id: SortOrder
  isActive: SortOrder
  month: SortOrder
  name: SortOrder
  planLevel: SortOrder
  price: SortOrder
}

input PlanInfoWhereInput {
  AND: [PlanInfoWhereInput!]
  NOT: [PlanInfoWhereInput!]
  OR: [PlanInfoWhereInput!]
  description: StringFilter
  externalFeatureVariableId: StringNullableFilter
  id: IntFilter
  isActive: BoolFilter
  month: IntFilter
  name: StringFilter
  planLevel: IntNullableFilter
  price: IntFilter
}

input PlanInfoWhereUniqueInput {
  id: Int
}

type Product {
  activeProductStore: [ProductStore!]!
  activeTaobaoProduct: TaobaoProduct!
  admin: Admin
  adminId: Int
  attribute: String!
  auctionFee: Float
  brandName: String!
  categoryInfoA001: CategoryInfoA001
  categoryInfoA006: CategoryInfoA006
  categoryInfoA027: CategoryInfoA027
  categoryInfoA077: CategoryInfoA077
  categoryInfoA112: CategoryInfoA112
  categoryInfoA113: CategoryInfoA113
  categoryInfoA524: CategoryInfoA524
  categoryInfoA525: CategoryInfoA525
  categoryInfoB378: CategoryInfoB378
  categoryInfoB719: CategoryInfoB719
  categoryInfoB956: CategoryInfoB956
  cnyRate: Float!
  coupangFee: Float
  createdAt: DateTime!
  description: String!
  gmarketFee: Float
  id: Int!
  imageThumbnail: [String!]!
  imageThumbnailData: String!
  immSearchTags: String
  interparkFee: Float
  isImageTranslated: Boolean!
  localShippingCode: Int
  localShippingFee: Int!
  lotteonFee: Float
  lotteonNormalFee: Float
  manuFacturer: String!
  marginRate: Float!
  marginUnitType: String
  modelName: String!
  modifiedAt: DateTime!
  name: String!
  naverFee: Float
  optionInfoHtml: String!
  price: Int!
  productCode: String!
  productOption(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOptionName(cursor: ProductOptionNameWhereUniqueInput, orderBy: [ProductOptionNameOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionNameWhereInput): [ProductOptionName!]!
  productStateEnum: productStateEnum!
  productStore(cursor: ProductStoreWhereUniqueInput, orderBy: [ProductStoreOrderByWithRelationInput!], skip: Int, take: Int, where: ProductStoreWhereInput): [ProductStore!]!
  searchTags: String
  shippingFee: Int!
  siilCode: String
  siilData: String
  siilInfo: SiilSavedData
  sillCodeA001: String!
  sillCodeA006: String!
  sillCodeA027: String!
  sillCodeA077: String!
  sillCodeA112: String!
  sillCodeA113: String!
  sillCodeA524: String!
  sillCodeA525: String!
  sillCodeB378: String!
  sillCodeB719: String!
  sillCodeB956: String!
  sillDataA001: String!
  sillDataA006: String!
  sillDataA027: String!
  sillDataA077: String!
  sillDataA112: String!
  sillDataA113: String!
  sillDataA524: String!
  sillDataA525: String!
  sillDataB378: String!
  sillDataB719: String!
  sillDataB956: String!
  state: Int!
  stockUpdatedAt: DateTime!
  streetFee: Float
  streetNormalFee: Float
  taobaoProduct: TaobaoProduct!
  taobaoProductId: Int!
  tmonFee: Float
  user: User
  userId: Int
  wemakepriceFee: Float
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductNewThumbnailImageUpdateInput {
  index: Int!
  uploadImageBase64: String
}

type ProductOption {
  defaultShippingFee: Int
  id: Int!
  isActive: Boolean!
  name: String!
  optionString: String!
  optionValue1Id: Int!
  optionValue2Id: Int
  optionValue3Id: Int
  optionValue4Id: Int
  optionValue5Id: Int
  price: Int!
  priceCny: Float!
  product: Product!
  productId: Int!
  productOption1: ProductOptionValue!
  productOption2: ProductOptionValue
  productOption3: ProductOptionValue
  productOption4: ProductOptionValue
  productOption5: ProductOptionValue
  stock: Int
  taobaoSkuId: String!
}

input ProductOptionInput {
  defaultShippingFee: Int
  isActive: Boolean
  price: Int
  productOptionId: Int!
  stock: Int
}

input ProductOptionListRelationFilter {
  every: ProductOptionWhereInput
  none: ProductOptionWhereInput
  some: ProductOptionWhereInput
}

type ProductOptionName {
  id: Int!
  isActive: Boolean
  isNameTranslated: Boolean!
  name: String!
  order: Int!
  product: Product!
  productId: Int!
  productOptionValue(cursor: ProductOptionValueWhereUniqueInput, orderBy: [ProductOptionValueOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionValueWhereInput): [ProductOptionValue!]!
  taobaoPid: String!
}

input ProductOptionNameInput {
  name: String
  productIds: Int!
}

input ProductOptionNameListRelationFilter {
  every: ProductOptionNameWhereInput
  none: ProductOptionNameWhereInput
  some: ProductOptionNameWhereInput
}

input ProductOptionNameOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOptionNameOrderByWithRelationInput {
  hasImage: SortOrder
  id: SortOrder
  isActive: SortOrder
  isNameTranslated: SortOrder
  name: SortOrder
  order: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  productOptionValue: ProductOptionValueOrderByRelationAggregateInput
  taobaoPid: SortOrder
}

input ProductOptionNameSwapInput {
  order: Int
  productOptionNameId: Int!
}

input ProductOptionNameUpdateInput {
  id: Int!
  name: String!
}

input ProductOptionNameWhereInput {
  AND: [ProductOptionNameWhereInput!]
  NOT: [ProductOptionNameWhereInput!]
  OR: [ProductOptionNameWhereInput!]
  hasImage: BoolFilter
  id: IntFilter
  isActive: BoolNullableFilter
  isNameTranslated: BoolFilter
  name: StringFilter
  order: IntFilter
  product: ProductWhereInput
  productId: IntFilter
  productOptionValue: ProductOptionValueListRelationFilter
  taobaoPid: StringFilter
}

input ProductOptionNameWhereUniqueInput {
  id: Int
}

input ProductOptionOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOptionOrderByWithRelationInput {
  defaultShippingFee: SortOrder
  id: SortOrder
  isActive: SortOrder
  optionString: SortOrder
  optionValue1Id: SortOrder
  optionValue2Id: SortOrder
  optionValue3Id: SortOrder
  optionValue4Id: SortOrder
  optionValue5Id: SortOrder
  price: SortOrder
  priceCny: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  productOption1: ProductOptionValueOrderByWithRelationInput
  productOption2: ProductOptionValueOrderByWithRelationInput
  productOption3: ProductOptionValueOrderByWithRelationInput
  productOption4: ProductOptionValueOrderByWithRelationInput
  productOption5: ProductOptionValueOrderByWithRelationInput
  stock: SortOrder
  taobaoSkuId: SortOrder
}

input ProductOptionUQ_product_id_sku_idCompoundUniqueInput {
  productId: Int!
  taobaoSkuId: String!
}

input ProductOptionUQ_product_optionCompoundUniqueInput {
  optionValue1Id: Int!
  optionValue2Id: Int!
  optionValue3Id: Int!
  optionValue4Id: Int!
  optionValue5Id: Int!
}

input ProductOptionUpdateInput {
  id: Int!
  isActive: Boolean!
  price: Int!
  stock: Int!
}

type ProductOptionValue {
  id: Int!
  image: String
  isActive: Boolean!
  isNameTranslated: Boolean!
  name: String!
  number: Int!
  optionNameOrder: Int!
  optionValue1(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  optionValue2(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  optionValue3(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  optionValue4(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  optionValue5(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  originalName: String
  productOption(cursor: ProductOptionWhereUniqueInput, orderBy: [ProductOptionOrderByWithRelationInput], skip: Int, take: Int, where: ProductOptionWhereInput): [ProductOption!]!
  productOptionName: ProductOptionName!
  productOptionNameId: Int!
  taobaoVid: String!
}

input ProductOptionValueBySomeOne {
  newImage: Upload!
}

input ProductOptionValueImageUpdateInput {
  id: Int!
  image: String
  newImageBase64: String
}

input ProductOptionValueInput {
  name: String
  productOptionValueId: Int!
}

input ProductOptionValueListRelationFilter {
  every: ProductOptionValueWhereInput
  none: ProductOptionValueWhereInput
  some: ProductOptionValueWhereInput
}

input ProductOptionValueOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOptionValueOrderByWithRelationInput {
  id: SortOrder
  image: SortOrder
  isActive: SortOrder
  isNameTranslated: SortOrder
  name: SortOrder
  number: SortOrder
  optionNameOrder: SortOrder
  optionValue1: ProductOptionOrderByRelationAggregateInput
  optionValue2: ProductOptionOrderByRelationAggregateInput
  optionValue3: ProductOptionOrderByRelationAggregateInput
  optionValue4: ProductOptionOrderByRelationAggregateInput
  optionValue5: ProductOptionOrderByRelationAggregateInput
  originalName: SortOrder
  productOptionName: ProductOptionNameOrderByWithRelationInput
  productOptionNameId: SortOrder
  taobaoVid: SortOrder
}

input ProductOptionValueSwapInput {
  number: Int
  productOptionValueId: Int!
}

input ProductOptionValueUpdateInput {
  id: Int!
  image: String
  isActive: Boolean
  name: String!
  newImage: Upload
  newImageBase64: String
}

input ProductOptionValueWhereInput {
  AND: [ProductOptionValueWhereInput!]
  NOT: [ProductOptionValueWhereInput!]
  OR: [ProductOptionValueWhereInput!]
  id: IntFilter
  image: StringNullableFilter
  isActive: BoolFilter
  isNameTranslated: BoolFilter
  name: StringFilter
  number: IntFilter
  optionNameOrder: IntFilter
  optionValue1: ProductOptionListRelationFilter
  optionValue2: ProductOptionListRelationFilter
  optionValue3: ProductOptionListRelationFilter
  optionValue4: ProductOptionListRelationFilter
  optionValue5: ProductOptionListRelationFilter
  originalName: StringNullableFilter
  productOptionName: ProductOptionNameWhereInput
  productOptionNameId: IntFilter
  taobaoVid: StringFilter
}

input ProductOptionValueWhereUniqueInput {
  id: Int
}

input ProductOptionWhereInput {
  AND: [ProductOptionWhereInput!]
  NOT: [ProductOptionWhereInput!]
  OR: [ProductOptionWhereInput!]
  defaultShippingFee: IntNullableFilter
  id: IntFilter
  isActive: BoolFilter
  optionString: StringFilter
  optionValue1Id: IntFilter
  optionValue2Id: IntNullableFilter
  optionValue3Id: IntNullableFilter
  optionValue4Id: IntNullableFilter
  optionValue5Id: IntNullableFilter
  price: IntFilter
  priceCny: FloatFilter
  product: ProductWhereInput
  productId: IntFilter
  productOption1: ProductOptionValueWhereInput
  productOption2: ProductOptionValueWhereInput
  productOption3: ProductOptionValueWhereInput
  productOption4: ProductOptionValueWhereInput
  productOption5: ProductOptionValueWhereInput
  stock: IntNullableFilter
  taobaoSkuId: StringFilter
}

input ProductOptionWhereUniqueInput {
  UQ_product_id_sku_id: ProductOptionUQ_product_id_sku_idCompoundUniqueInput
  UQ_product_option: ProductOptionUQ_product_optionCompoundUniqueInput
  id: Int
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  adminId: SortOrder
  attribute: SortOrder
  auctionFee: SortOrder
  brandName: SortOrder
  categoryA001: SortOrder
  categoryA006: SortOrder
  categoryA027: SortOrder
  categoryA077: SortOrder
  categoryA112: SortOrder
  categoryA113: SortOrder
  categoryA524: SortOrder
  categoryA525: SortOrder
  categoryB378: SortOrder
  categoryB719: SortOrder
  categoryB956: SortOrder
  categoryEsm: SortOrder
  categoryInfoA001: CategoryInfoA001OrderByWithRelationInput
  categoryInfoA006: CategoryInfoA006OrderByWithRelationInput
  categoryInfoA027: CategoryInfoA027OrderByWithRelationInput
  categoryInfoA077: CategoryInfoA077OrderByWithRelationInput
  categoryInfoA112: CategoryInfoA112OrderByWithRelationInput
  categoryInfoA113: CategoryInfoA113OrderByWithRelationInput
  categoryInfoA524: CategoryInfoA524OrderByWithRelationInput
  categoryInfoA525: CategoryInfoA525OrderByWithRelationInput
  categoryInfoB378: CategoryInfoB378OrderByWithRelationInput
  categoryInfoB719: CategoryInfoB719OrderByWithRelationInput
  categoryInfoB956: CategoryInfoB956OrderByWithRelationInput
  cnyRate: SortOrder
  coupangFee: SortOrder
  createdAt: SortOrder
  description: SortOrder
  gmarketFee: SortOrder
  id: SortOrder
  imageThumbnailData: SortOrder
  immSearchTags: SortOrder
  interparkFee: SortOrder
  isImageTranslated: SortOrder
  localShippingCode: SortOrder
  localShippingFee: SortOrder
  lotteonFee: SortOrder
  lotteonNormalFee: SortOrder
  manuFacturer: SortOrder
  marginRate: SortOrder
  marginUnitType: SortOrder
  modelName: SortOrder
  modifiedAt: SortOrder
  name: SortOrder
  naverFee: SortOrder
  price: SortOrder
  productCode: SortOrder
  productOption: ProductOptionOrderByRelationAggregateInput
  productOptionName: ProductOptionNameOrderByRelationAggregateInput
  productStateEnum: productStateEnumOrderByWithRelationInput
  productStore: ProductStoreOrderByRelationAggregateInput
  productViewLog: productViewLogOrderByRelationAggregateInput
  searchTags: SortOrder
  shippingFee: SortOrder
  siilCode: SortOrder
  siilData: SortOrder
  sillCodeA001: SortOrder
  sillCodeA006: SortOrder
  sillCodeA027: SortOrder
  sillCodeA077: SortOrder
  sillCodeA112: SortOrder
  sillCodeA113: SortOrder
  sillCodeA524: SortOrder
  sillCodeA525: SortOrder
  sillCodeB378: SortOrder
  sillCodeB719: SortOrder
  sillCodeB956: SortOrder
  sillDataA001: SortOrder
  sillDataA006: SortOrder
  sillDataA027: SortOrder
  sillDataA077: SortOrder
  sillDataA112: SortOrder
  sillDataA113: SortOrder
  sillDataA524: SortOrder
  sillDataA525: SortOrder
  sillDataB378: SortOrder
  sillDataB719: SortOrder
  sillDataB956: SortOrder
  state: SortOrder
  stockUpdatedAt: SortOrder
  streetFee: SortOrder
  streetNormalFee: SortOrder
  taobaoProduct: TaobaoProductOrderByWithRelationInput
  taobaoProductId: SortOrder
  tmonFee: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  wemakepriceFee: SortOrder
}

type ProductStore {
  cnt: Int!
  connectedAt: DateTime!
  etcVendorItemId: String
  id: Int!
  inflow: Int
  product: Product!
  productId: Int!
  productStoreLog(cursor: ProductStoreLogWhereUniqueInput, orderBy: [ProductStoreLogOrderByWithRelationInput!], skip: Int, take: Int, where: ProductStoreLogWhereInput): [ProductStoreLog!]!
  productStoreState: ProductStoreState!
  siteCode: String!
  state: Int!
  storeProductId: String
  storeUrl: String
  user: User!
  userId: Int!
}

input ProductStoreListRelationFilter {
  every: ProductStoreWhereInput
  none: ProductStoreWhereInput
  some: ProductStoreWhereInput
}

type ProductStoreLog {
  createdAt: DateTime!
  destState: Int!
  errorMessage: String!
  id: Int!
  jobId: String!
  modifiedAt: DateTime!
  productStoreId: Int!
  productStoreLogEnum: productStoreLogEnum!
  productStoreState: ProductStoreState!
  productstore: ProductStore!
  uploadState: Int!
}

input ProductStoreLogListRelationFilter {
  every: ProductStoreLogWhereInput
  none: ProductStoreLogWhereInput
  some: ProductStoreLogWhereInput
}

input ProductStoreLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductStoreLogOrderByWithRelationInput {
  createdAt: SortOrder
  destState: SortOrder
  errorMessage: SortOrder
  id: SortOrder
  jobId: SortOrder
  modifiedAt: SortOrder
  productStoreId: SortOrder
  productStoreLogEnum: productStoreLogEnumOrderByWithRelationInput
  productStoreState: ProductStoreStateOrderByWithRelationInput
  productstore: ProductStoreOrderByWithRelationInput
  uploadState: SortOrder
}

input ProductStoreLogWhereInput {
  AND: [ProductStoreLogWhereInput!]
  NOT: [ProductStoreLogWhereInput!]
  OR: [ProductStoreLogWhereInput!]
  createdAt: DateTimeFilter
  destState: IntFilter
  errorMessage: StringFilter
  id: IntFilter
  jobId: StringFilter
  modifiedAt: DateTimeFilter
  productStoreId: IntFilter
  productStoreLogEnum: productStoreLogEnumWhereInput
  productStoreState: ProductStoreStateWhereInput
  productstore: ProductStoreWhereInput
  uploadState: IntFilter
}

input ProductStoreLogWhereUniqueInput {
  id: Int
}

input ProductStoreOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input ProductStoreOrderByWithRelationInput {
  cnt: SortOrder
  connectedAt: SortOrder
  etcVendorItemId: SortOrder
  id: SortOrder
  inflow: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  productStoreLog: ProductStoreLogOrderByRelationAggregateInput
  productStoreState: ProductStoreStateOrderByWithRelationInput
  productViewLog: productViewLogOrderByRelationAggregateInput
  siteCode: SortOrder
  state: SortOrder
  storeProductId: SortOrder
  storeUrl: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

type ProductStoreState {
  description: String!
  id: Int!
  name: String!
}

input ProductStoreStateOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  productStore: ProductStoreOrderByRelationAggregateInput
  productStoreLog: ProductStoreLogOrderByRelationAggregateInput
}

input ProductStoreStateWhereInput {
  AND: [ProductStoreStateWhereInput!]
  NOT: [ProductStoreStateWhereInput!]
  OR: [ProductStoreStateWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  productStore: ProductStoreListRelationFilter
  productStoreLog: ProductStoreLogListRelationFilter
}

input ProductStoreWhereInput {
  AND: [ProductStoreWhereInput!]
  NOT: [ProductStoreWhereInput!]
  OR: [ProductStoreWhereInput!]
  cnt: IntFilter
  connectedAt: DateTimeFilter
  etcVendorItemId: StringNullableFilter
  id: IntFilter
  inflow: IntNullableFilter
  product: ProductWhereInput
  productId: IntFilter
  productStoreLog: ProductStoreLogListRelationFilter
  productStoreState: ProductStoreStateWhereInput
  productViewLog: ProductViewLogListRelationFilter
  siteCode: StringFilter
  state: IntFilter
  storeProductId: StringNullableFilter
  storeUrl: StringNullableFilter
  user: UserWhereInput
  userId: IntFilter
}

input ProductStoreWhereUniqueInput {
  id: Int
}

input ProductThumbnailImageUpdateInput {
  defaultImage: String!
  uploadImageBase64: String
}

input ProductThumbnailUpdateInput {
  defaultImage: String!
  uploadImage: Upload
}

input ProductUQ_user_id_taobao_product_idCompoundUniqueInput {
  taobaoProductId: Int!
  userId: Int!
}

input ProductViewLogListRelationFilter {
  every: productViewLogWhereInput
  none: productViewLogWhereInput
  some: productViewLogWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  admin: AdminWhereInput
  adminId: IntNullableFilter
  attribute: StringFilter
  auctionFee: FloatNullableFilter
  brandName: StringFilter
  categoryA001: StringNullableFilter
  categoryA006: StringNullableFilter
  categoryA027: StringNullableFilter
  categoryA077: StringNullableFilter
  categoryA112: StringNullableFilter
  categoryA113: StringNullableFilter
  categoryA524: StringNullableFilter
  categoryA525: StringNullableFilter
  categoryB378: StringNullableFilter
  categoryB719: StringNullableFilter
  categoryB956: StringNullableFilter
  categoryEsm: StringNullableFilter
  categoryInfoA001: CategoryInfoA001WhereInput
  categoryInfoA006: CategoryInfoA006WhereInput
  categoryInfoA027: CategoryInfoA027WhereInput
  categoryInfoA077: CategoryInfoA077WhereInput
  categoryInfoA112: CategoryInfoA112WhereInput
  categoryInfoA113: CategoryInfoA113WhereInput
  categoryInfoA524: CategoryInfoA524WhereInput
  categoryInfoA525: CategoryInfoA525WhereInput
  categoryInfoB378: CategoryInfoB378WhereInput
  categoryInfoB719: CategoryInfoB719WhereInput
  categoryInfoB956: CategoryInfoB956WhereInput
  cnyRate: FloatFilter
  coupangFee: FloatNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  gmarketFee: FloatNullableFilter
  id: IntFilter
  imageThumbnailData: StringFilter
  immSearchTags: StringNullableFilter
  interparkFee: FloatNullableFilter
  isImageTranslated: BoolFilter
  localShippingCode: IntNullableFilter
  localShippingFee: IntFilter
  lotteonFee: FloatNullableFilter
  lotteonNormalFee: FloatNullableFilter
  manuFacturer: StringFilter
  marginRate: FloatFilter
  marginUnitType: StringNullableFilter
  modelName: StringFilter
  modifiedAt: DateTimeFilter
  name: StringFilter
  naverFee: FloatNullableFilter
  price: IntFilter
  productCode: StringFilter
  productOption: ProductOptionListRelationFilter
  productOptionName: ProductOptionNameListRelationFilter
  productStateEnum: productStateEnumWhereInput
  productStore: ProductStoreListRelationFilter
  productViewLog: ProductViewLogListRelationFilter
  searchTags: StringNullableFilter
  shippingFee: IntFilter
  siilCode: StringNullableFilter
  siilData: StringNullableFilter
  sillCodeA001: StringFilter
  sillCodeA006: StringFilter
  sillCodeA027: StringFilter
  sillCodeA077: StringFilter
  sillCodeA112: StringFilter
  sillCodeA113: StringFilter
  sillCodeA524: StringFilter
  sillCodeA525: StringFilter
  sillCodeB378: StringFilter
  sillCodeB719: StringFilter
  sillCodeB956: StringFilter
  sillDataA001: StringFilter
  sillDataA006: StringFilter
  sillDataA027: StringFilter
  sillDataA077: StringFilter
  sillDataA112: StringFilter
  sillDataA113: StringFilter
  sillDataA524: StringFilter
  sillDataA525: StringFilter
  sillDataB378: StringFilter
  sillDataB719: StringFilter
  sillDataB956: StringFilter
  state: IntFilter
  stockUpdatedAt: DateTimeFilter
  streetFee: FloatNullableFilter
  streetNormalFee: FloatNullableFilter
  taobaoProduct: TaobaoProductWhereInput
  taobaoProductId: IntFilter
  tmonFee: FloatNullableFilter
  user: UserWhereInput
  userId: IntNullableFilter
  wemakepriceFee: FloatNullableFilter
}

input ProductWhereUniqueInput {
  UQ_user_id_taobao_product_id: ProductUQ_user_id_taobao_product_idCompoundUniqueInput
  id: Int
}

type PurchaseLog {
  expiredAt: DateTime!
  id: Int!
  payAmount: Int!
  payId: String
  planInfo: String!
  purchasedAt: DateTime!
  state: PurchaseLogState!
  type: PurchaseLogType!
  user: User!
  userId: Int!
}

input PurchaseLogListRelationFilter {
  every: PurchaseLogWhereInput
  none: PurchaseLogWhereInput
  some: PurchaseLogWhereInput
}

input PurchaseLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

enum PurchaseLogState {
  ACTIVE
  ENDED
  REFUNDED
  WAIT_DEPOSIT
  WAIT_PAYMENT
}

enum PurchaseLogType {
  IMAGE_TRANSLATE
  PLAN
  STOCK
}

input PurchaseLogWhereInput {
  AND: [PurchaseLogWhereInput!]
  NOT: [PurchaseLogWhereInput!]
  OR: [PurchaseLogWhereInput!]
  expiredAt: DateTimeFilter
  id: IntFilter
  payAmount: IntFilter
  payId: StringNullableFilter
  planInfo: StringFilter
  purchasedAt: DateTimeFilter
  state: EnumPurchaseLogStateFilter
  type: EnumPurchaseLogTypeFilter
  user: UserWhereInput
  userId: IntFilter
}

type Query {
  getExcelSampleUrlBySomeone(type: ExcelSampleEnum!): String!
  getRegisterProductsDataByUser(productIds: [Int!]!, siteCode: [String!]!): String!
  searchCategoryInfoA001BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoA006BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoA027BySomeone(code: String, keyword: String): [CategoryInformationType!]!
  searchCategoryInfoA077BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoA112BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoA113BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoA524BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoA525BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoB378BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoB719BySomeone(code: String): [CategoryInformationType!]!
  searchCategoryInfoB956BySomeone(code: String): [CategoryInformationType!]!
  searchManyCategoryInfoA077BySomeone(code: [String!]!): [CategoryInformationType!]!
  selectCnyRateByEveryone: Float!
  selectFreeUserDayLimitByAdmin: Int!
  selectFreeUserProductLimitByAdmin: Int!
  selectMyInfoByUser: User!
  selectMyOrderByUser(cursor: orderWhereUniqueInput, orderBy: [orderOrderByWithRelationInput!], skip: Int, take: Int, where: orderWhereInput): [order!]!
  selectMyProductByUser(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  selectMyProductsCountByUser(where: ProductWhereInput): Int!
  selectNoticeByEveryone(noticeId: Int!): Notice!
  selectNoticeCountByAdmin(where: NoticeWhereInput): Int
  selectNoticesByEveryone(cursor: NoticeWhereUniqueInput, orderBy: [NoticeOrderByWithRelationInput!], skip: Int, take: Int, where: NoticeWhereInput): [Notice!]!
  selectPlanInfosForEveryone(cursor: PlanInfoWhereUniqueInput, orderBy: [PlanInfoOrderByWithRelationInput!], skip: Int, take: Int, where: PlanInfoWhereInput): [PlanInfo!]!
  selectProductsByAdmin(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  selectProductsBySomeone(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  selectProductsCountByAdmin(where: ProductWhereInput): Int
  selectProductsCountBySomeone(where: ProductWhereInput): Int
  selectSiilInfoBySomeone(code: String!): [SiilItems!]!
  selectTaobaoProductsByAdmin(cursor: TaobaoProductWhereUniqueInput, orderBy: [TaobaoProductOrderByWithRelationInput!], skip: Int, take: Int, where: TaobaoProductWhereInput): [TaobaoProduct!]!
  selectTaobaoProductsByUser(cursor: TaobaoProductWhereUniqueInput, orderBy: [TaobaoProductOrderByWithRelationInput!], skip: Int, take: Int, where: TaobaoProductWhereInput): [TaobaoProduct!]!
  selectTaobaoProductsCountByAdmin(where: TaobaoProductWhereInput): Int
  selectTaobaoRefreshDayByEveryone: Int!
  selectUserLogsByUser: [UserLog!]!
  selectUserQuestionBySomeone(cursor: UserQuestionWhereUniqueInput, orderBy: [UserQuestionOrderByWithRelationInput!], skip: Int, take: Int, where: UserQuestionWhereInput): [UserQuestion!]!
  selectUserQuestionCountBySomeone(where: UserQuestionWhereInput): Int
  selectUsersByAdmin(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  selectUsersCountByAdmin(where: UserWhereInput): Int!
  selectWordTablesBySomeone(cursor: WordTableWhereUniqueInput, orderBy: [WordTableOrderByWithRelationInput!], skip: Int, take: Int, where: WordTableWhereInput): [WordTable!]!
  seletExistPurchaseLog(email: String!): Boolean!
  t_get: String
  t_getEncodedSetInfo: String
  testS3DeleteProduct: String
  translateText(engine: TranslateEngineEnumType! = PAPAGO, text: String!): String!
  whoami: String
}

type SignInType {
  accessToken: String!
  refreshToken: String!
}

input SiilInput {
  code: String!
  value: String!
}

type SiilItem {
  code: String!
  inputType: SiilItemTypeEnum!
  name: String!
  options: [String!]
}

enum SiilItemTypeEnum {
  INPUT
  SELECT
  YESNO
}

type SiilItems {
  data: [SiilItem!]!
  description: String!
}

type SiilSavedData {
  code: String!
  data: [SiilSavedItem!]!
}

type SiilSavedItem {
  code: String!
  value: String!
}

type SillInfoA001 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA001OrderByWithRelationInput {
  categoryInfoA001: CategoryInfoA001OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA001WhereInput {
  AND: [SillInfoA001WhereInput!]
  NOT: [SillInfoA001WhereInput!]
  OR: [SillInfoA001WhereInput!]
  categoryInfoA001: CategoryInfoA001ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoA006 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA006OrderByWithRelationInput {
  categoryInfoA006: CategoryInfoA006OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA006WhereInput {
  AND: [SillInfoA006WhereInput!]
  NOT: [SillInfoA006WhereInput!]
  OR: [SillInfoA006WhereInput!]
  categoryInfoA006: CategoryInfoA006ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoA027 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA027OrderByWithRelationInput {
  categoryInfoA027: CategoryInfoA027OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA027WhereInput {
  AND: [SillInfoA027WhereInput!]
  NOT: [SillInfoA027WhereInput!]
  OR: [SillInfoA027WhereInput!]
  categoryInfoA027: CategoryInfoA027ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoA077 {
  activeSillDataA001: [SillInfoA001!]!
  activeSillDataA006: [SillInfoA006!]!
  activeSillDataA027: [SillInfoA027!]!
  activeSillDataA077: [SillInfoA077!]!
  activeSillDataA112: [SillInfoA112!]!
  activeSillDataA113: [SillInfoA113!]!
  activeSillDataA524: [SillInfoA524!]!
  activeSillDataA525: [SillInfoA525!]!
  activeSillDataB378: [SillInfoB378!]!
  activeSillDataB719: [SillInfoB719!]!
  activeSillDataB956: [SillInfoB956!]!
  code: String!
  codeA001: String
  codeA006: String
  codeA027: String
  codeA112: String
  codeA113: String
  codeA524: String
  codeA525: String
  codeB378: String
  codeB719: String
  codeB956: String
  data: String!
  id: Int!
  name: String!
  sillInfoA001: SillInfoA001
  sillInfoA006: SillInfoA006
  sillInfoA027: SillInfoA027
  sillInfoA112: SillInfoA112
  sillInfoA113: SillInfoA113
  sillInfoA524: SillInfoA524
  sillInfoA525: SillInfoA525
  sillInfoB378: SillInfoB378
  sillInfoB719: SillInfoB719
  sillInfoB956: SillInfoB956
}

input SillInfoA077ListRelationFilter {
  every: SillInfoA077WhereInput
  none: SillInfoA077WhereInput
  some: SillInfoA077WhereInput
}

input SillInfoA077OrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input SillInfoA077OrderByWithRelationInput {
  categoryInfoA077: CategoryInfoA077OrderByRelationAggregateInput
  code: SortOrder
  codeA001: SortOrder
  codeA006: SortOrder
  codeA027: SortOrder
  codeA112: SortOrder
  codeA113: SortOrder
  codeA524: SortOrder
  codeA525: SortOrder
  codeB378: SortOrder
  codeB719: SortOrder
  codeB956: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA001: SillInfoA001OrderByWithRelationInput
  sillInfoA006: SillInfoA006OrderByWithRelationInput
  sillInfoA027: SillInfoA027OrderByWithRelationInput
  sillInfoA112: SillInfoA112OrderByWithRelationInput
  sillInfoA113: SillInfoA113OrderByWithRelationInput
  sillInfoA524: SillInfoA524OrderByWithRelationInput
  sillInfoA525: SillInfoA525OrderByWithRelationInput
  sillInfoB378: SillInfoB378OrderByWithRelationInput
  sillInfoB719: SillInfoB719OrderByWithRelationInput
  sillInfoB956: SillInfoB956OrderByWithRelationInput
}

input SillInfoA077WhereInput {
  AND: [SillInfoA077WhereInput!]
  NOT: [SillInfoA077WhereInput!]
  OR: [SillInfoA077WhereInput!]
  categoryInfoA077: CategoryInfoA077ListRelationFilter
  code: StringFilter
  codeA001: StringNullableFilter
  codeA006: StringNullableFilter
  codeA027: StringNullableFilter
  codeA112: StringNullableFilter
  codeA113: StringNullableFilter
  codeA524: StringNullableFilter
  codeA525: StringNullableFilter
  codeB378: StringNullableFilter
  codeB719: StringNullableFilter
  codeB956: StringNullableFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA001: SillInfoA001WhereInput
  sillInfoA006: SillInfoA006WhereInput
  sillInfoA027: SillInfoA027WhereInput
  sillInfoA112: SillInfoA112WhereInput
  sillInfoA113: SillInfoA113WhereInput
  sillInfoA524: SillInfoA524WhereInput
  sillInfoA525: SillInfoA525WhereInput
  sillInfoB378: SillInfoB378WhereInput
  sillInfoB719: SillInfoB719WhereInput
  sillInfoB956: SillInfoB956WhereInput
}

type SillInfoA112 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA112OrderByWithRelationInput {
  categoryInfoA112: CategoryInfoA112OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA112WhereInput {
  AND: [SillInfoA112WhereInput!]
  NOT: [SillInfoA112WhereInput!]
  OR: [SillInfoA112WhereInput!]
  categoryInfoA112: CategoryInfoA112ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoA113 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA113OrderByWithRelationInput {
  categoryInfoA113: CategoryInfoA113OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA113WhereInput {
  AND: [SillInfoA113WhereInput!]
  NOT: [SillInfoA113WhereInput!]
  OR: [SillInfoA113WhereInput!]
  categoryInfoA113: CategoryInfoA113ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoA524 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA524OrderByWithRelationInput {
  categoryInfoA524: CategoryInfoA524OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA524WhereInput {
  AND: [SillInfoA524WhereInput!]
  NOT: [SillInfoA524WhereInput!]
  OR: [SillInfoA524WhereInput!]
  categoryInfoA524: CategoryInfoA524ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoA525 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoA525OrderByWithRelationInput {
  categoryInfoA525: CategoryInfoA525OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoA525WhereInput {
  AND: [SillInfoA525WhereInput!]
  NOT: [SillInfoA525WhereInput!]
  OR: [SillInfoA525WhereInput!]
  categoryInfoA525: CategoryInfoA525ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoB378 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoB378OrderByWithRelationInput {
  categoryInfoB378: CategoryInfoB378OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoB378WhereInput {
  AND: [SillInfoB378WhereInput!]
  NOT: [SillInfoB378WhereInput!]
  OR: [SillInfoB378WhereInput!]
  categoryInfoB378: CategoryInfoB378ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoB719 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoB719OrderByWithRelationInput {
  categoryInfoB719: CategoryInfoB719OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoB719WhereInput {
  AND: [SillInfoB719WhereInput!]
  NOT: [SillInfoB719WhereInput!]
  OR: [SillInfoB719WhereInput!]
  categoryInfoB719: CategoryInfoB719ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

type SillInfoB956 {
  code: String!
  data: String!
  id: Int!
  name: String!
}

input SillInfoB956OrderByWithRelationInput {
  categoryInfoB956: CategoryInfoB956OrderByRelationAggregateInput
  code: SortOrder
  data: SortOrder
  id: SortOrder
  name: SortOrder
  sillInfoA077: SillInfoA077OrderByRelationAggregateInput
}

input SillInfoB956WhereInput {
  AND: [SillInfoB956WhereInput!]
  NOT: [SillInfoB956WhereInput!]
  OR: [SillInfoB956WhereInput!]
  categoryInfoB956: CategoryInfoB956ListRelationFilter
  code: StringFilter
  data: StringFilter
  id: IntFilter
  name: StringFilter
  sillInfoA077: SillInfoA077ListRelationFilter
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  subscribeUserEvent: UserLog
}

enum TaobaoItemOrderBy {
  """판매자 신용 순"""
  CREDIT

  """판매량순"""
  SALE
}

type TaobaoProduct {
  brand: String!
  createdAt: DateTime!
  id: Int!
  imageThumbnail: String!
  modifiedAt: DateTime!
  name: String!
  originalData: String!
  price: Float!
  product(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  shopName: String
  taobaoBrandId: String
  taobaoCategoryId: String!
  taobaoNumIid: String!
  url: String
  videoUrl: String
}

type TaobaoProductOption {
  name: String!
  taobaoSkuId: String!
}

type TaobaoProductOptionInfo {
  option: [TaobaoProductOption!]!
  optionName: [TaobaoProductOptionName!]!
  optionValue: [TaobaoProductOptionValue!]!
}

type TaobaoProductOptionName {
  name: String!
  taobaoPid: String!
}

type TaobaoProductOptionValue {
  image: String
  name: String!
  taobaoVid: String!
}

input TaobaoProductOrderByWithRelationInput {
  brand: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageThumbnail: SortOrder
  modifiedAt: SortOrder
  name: SortOrder
  originalData: SortOrder
  price: SortOrder
  product: ProductOrderByRelationAggregateInput
  shopName: SortOrder
  taobaoBrandId: SortOrder
  taobaoCategoryId: SortOrder
  taobaoNumIid: SortOrder
  translateData: SortOrder
  url: SortOrder
  videoUrl: SortOrder
}

input TaobaoProductWhereInput {
  AND: [TaobaoProductWhereInput!]
  NOT: [TaobaoProductWhereInput!]
  OR: [TaobaoProductWhereInput!]
  brand: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageThumbnail: StringFilter
  modifiedAt: DateTimeFilter
  name: StringFilter
  originalData: StringFilter
  price: FloatFilter
  product: ProductListRelationFilter
  shopName: StringNullableFilter
  taobaoBrandId: StringNullableFilter
  taobaoCategoryId: StringFilter
  taobaoNumIid: StringFilter
  translateData: StringNullableFilter
  url: StringNullableFilter
  videoUrl: StringNullableFilter
}

input TaobaoProductWhereUniqueInput {
  id: Int
}

enum TranslateEngineEnumType {
  BAIDU
  GOOGLE
  PAPAGO
}

enum TranslateTargetEnumType {
  """상품 전체 일괄번역,id:Product"""
  PRODUCT_ALL

  """상품 이름 번역,id:Product"""
  PRODUCT_NAME

  """상품 옵션 일괄번역,id:ProductOptionName"""
  PRODUCT_OPTION_ALL

  """상품 옵션 이름 번역,id:ProductOptionName"""
  PRODUCT_OPTION_NAME

  """상품 옵션별 이름 번역,id:ProductOptionValue"""
  PRODUCT_OPTION_VALUE
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  connectedUsers: [User!]!
  createdAt: DateTime!
  createdToken: DateTime
  credit: Int!
  email: String!
  id: Int!
  kakaoId: String
  master: Int!
  masterUserId: Int
  naverId: String
  password: String
  product(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  productCount: Int!
  purchaseInfo: UserPurchaseInfo!
  purchaseInfo2: UserPurchaseInfo!
  refAvailable: Boolean!
  refCode: String
  state: UserState!
  token: String
  userInfo: UserInfo
  userLog(cursor: UserLogWhereUniqueInput, orderBy: [UserLogOrderByWithRelationInput!], skip: Int, take: Int, where: UserLogWhereInput): [UserLog!]!
  verificationNumber: String!
}

type UserInfo {
  additionalShippingFeeJeju: Int!
  asInformation: String
  asTel: String
  auctionFee: Float!
  auctionUseType: String!
  autoPrice: String!
  calculateWonType: String!
  cnyRate: Float!
  cnyRateDollar: Float!
  cnyRateEuro: Float!
  cnyRateYen: Float!
  collectCheckPosition: String
  collectStock: Int!
  collectTimeout: Int!
  coupangAccessKey: String!
  coupangDefaultInbound: String!
  coupangDefaultOutbound: String!
  coupangFee: Float!
  coupangImageOpt: String!
  coupangLoginId: String!
  coupangMaximumBuyForPerson: Int!
  coupangOutboundShippingTimeDay: Int!
  coupangSecretKey: String!
  coupangUnionDeliveryType: String!
  coupangUseType: String!
  coupangVendorId: String!
  defaultPrice: String!
  defaultShippingFee: Int!
  descriptionShowTitle: String!
  discountAmount: Int
  discountUnitType: String
  esmplusAuctionId: String!
  esmplusGmarketId: String!
  esmplusMasterId: String!
  exchangeShippingFee: Int!
  extraShippingFee: Int!
  fixImageBottom: String
  fixImageSubBottom: String
  fixImageSubTop: String
  fixImageTop: String
  gmarketFee: Float!
  gmarketUseType: String!
  interparkCertKey: String!
  interparkEditCertKey: String!
  interparkEditSecretKey: String!
  interparkFee: Float!
  interparkSecretKey: String!
  interparkUseType: String!
  lotteonApiKey: String!
  lotteonFee: Float!
  lotteonNormalFee: Float!
  lotteonNormalUseType: String!
  lotteonSellerType: String!
  lotteonUseType: String
  lotteonVendorId: String!
  marginRate: Float!
  marginUnitType: String
  maxProductLimit: Int
  naverAutoSearchTag: String!
  naverFee: Float!
  naverOrigin: String!
  naverOriginCode: String!
  naverStoreOnly: String!
  naverStoreUrl: String!
  naverUseType: String!
  optionAlignTop: String!
  optionIndexType: Int!
  optionTwoWays: String!
  orderToDeliveryMembership: String!
  orderToDeliveryMethod: String!
  orderToDeliveryName: String!
  phone: String
  productCollectCount: Int!
  refundShippingFee: Int!
  sillFromCategory: String
  streetApiKey: String!
  streetApiKey2: String!
  streetApiKey3: String!
  streetApiKey4: String!
  streetApiMemo: String!
  streetApiMemo2: String!
  streetApiMemo3: String!
  streetApiMemo4: String!
  streetDefaultInbound: String!
  streetDefaultOutbound: String!
  streetFee: Float!
  streetNormalApiKey: String!
  streetNormalApiKey2: String!
  streetNormalApiKey3: String!
  streetNormalApiKey4: String!
  streetNormalApiMemo: String!
  streetNormalApiMemo2: String!
  streetNormalApiMemo3: String!
  streetNormalApiMemo4: String!
  streetNormalFee: Float!
  streetNormalInbound: String
  streetNormalOutbound: String
  streetNormalUseKeyType: String!
  streetNormalUseType: String!
  streetUseKeyType: String!
  streetUseType: String!
  thumbnailRepresentNo: String
  tmonFee: Float!
  tmonId: String
  tmonUseType: String!
  useDetailInformation: String!
  user: User!
  userId: Int!
  wemakepriceFee: Float!
  wemakepriceId: String!
  wemakepriceUseType: String!
}

input UserInfoOrderByWithRelationInput {
  additionalShippingFeeJeju: SortOrder
  asInformation: SortOrder
  asTel: SortOrder
  auctionFee: SortOrder
  auctionUseType: SortOrder
  autoPrice: SortOrder
  calculateWonType: SortOrder
  cnyRate: SortOrder
  cnyRateDollar: SortOrder
  cnyRateEuro: SortOrder
  cnyRateYen: SortOrder
  collectCheckPosition: SortOrder
  collectStock: SortOrder
  collectTimeout: SortOrder
  coupangAccessKey: SortOrder
  coupangDefaultInbound: SortOrder
  coupangDefaultOutbound: SortOrder
  coupangFee: SortOrder
  coupangImageOpt: SortOrder
  coupangLoginId: SortOrder
  coupangMaximumBuyForPerson: SortOrder
  coupangOutboundShippingTimeDay: SortOrder
  coupangSecretKey: SortOrder
  coupangUnionDeliveryType: SortOrder
  coupangUseType: SortOrder
  coupangVendorId: SortOrder
  defaultPrice: SortOrder
  defaultShippingFee: SortOrder
  descriptionShowTitle: SortOrder
  discountAmount: SortOrder
  discountUnitType: SortOrder
  esmplusAuctionId: SortOrder
  esmplusGmarketId: SortOrder
  esmplusMasterId: SortOrder
  exchangeShippingFee: SortOrder
  extraShippingFee: SortOrder
  fixImageBottom: SortOrder
  fixImageSubBottom: SortOrder
  fixImageSubTop: SortOrder
  fixImageTop: SortOrder
  gmarketFee: SortOrder
  gmarketUseType: SortOrder
  interparkCertKey: SortOrder
  interparkEditCertKey: SortOrder
  interparkEditSecretKey: SortOrder
  interparkFee: SortOrder
  interparkSecretKey: SortOrder
  interparkUseType: SortOrder
  lotteonApiKey: SortOrder
  lotteonFee: SortOrder
  lotteonNormalFee: SortOrder
  lotteonNormalUseType: SortOrder
  lotteonSellerType: SortOrder
  lotteonUseType: SortOrder
  lotteonVendorId: SortOrder
  marginRate: SortOrder
  marginUnitType: SortOrder
  maxProductLimit: SortOrder
  naverAutoSearchTag: SortOrder
  naverFee: SortOrder
  naverOrigin: SortOrder
  naverOriginCode: SortOrder
  naverStoreOnly: SortOrder
  naverStoreUrl: SortOrder
  naverUseType: SortOrder
  optionAlignTop: SortOrder
  optionIndexType: SortOrder
  optionTwoWays: SortOrder
  orderToDeliveryMembership: SortOrder
  orderToDeliveryMethod: SortOrder
  orderToDeliveryName: SortOrder
  phone: SortOrder
  productCollectCount: SortOrder
  refundShippingFee: SortOrder
  sillFromCategory: SortOrder
  streetApiKey: SortOrder
  streetApiKey2: SortOrder
  streetApiKey3: SortOrder
  streetApiKey4: SortOrder
  streetApiMemo: SortOrder
  streetApiMemo2: SortOrder
  streetApiMemo3: SortOrder
  streetApiMemo4: SortOrder
  streetDefaultInbound: SortOrder
  streetDefaultOutbound: SortOrder
  streetFee: SortOrder
  streetNormalApiKey: SortOrder
  streetNormalApiKey2: SortOrder
  streetNormalApiKey3: SortOrder
  streetNormalApiKey4: SortOrder
  streetNormalApiMemo: SortOrder
  streetNormalApiMemo2: SortOrder
  streetNormalApiMemo3: SortOrder
  streetNormalApiMemo4: SortOrder
  streetNormalFee: SortOrder
  streetNormalInbound: SortOrder
  streetNormalOutbound: SortOrder
  streetNormalUseKeyType: SortOrder
  streetNormalUseType: SortOrder
  streetUseKeyType: SortOrder
  streetUseType: SortOrder
  thumbnailRepresentNo: SortOrder
  tmonFee: SortOrder
  tmonId: SortOrder
  tmonUseType: SortOrder
  useDetailInformation: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  wemakepriceFee: SortOrder
  wemakepriceId: SortOrder
  wemakepriceUseType: SortOrder
}

input UserInfoWhereInput {
  AND: [UserInfoWhereInput!]
  NOT: [UserInfoWhereInput!]
  OR: [UserInfoWhereInput!]
  additionalShippingFeeJeju: IntFilter
  asInformation: StringNullableFilter
  asTel: StringNullableFilter
  auctionFee: FloatFilter
  auctionUseType: StringFilter
  autoPrice: StringFilter
  calculateWonType: StringFilter
  cnyRate: FloatFilter
  cnyRateDollar: FloatFilter
  cnyRateEuro: FloatFilter
  cnyRateYen: FloatFilter
  collectCheckPosition: StringNullableFilter
  collectStock: IntFilter
  collectTimeout: IntFilter
  coupangAccessKey: StringFilter
  coupangDefaultInbound: StringFilter
  coupangDefaultOutbound: StringFilter
  coupangFee: FloatFilter
  coupangImageOpt: StringFilter
  coupangLoginId: StringFilter
  coupangMaximumBuyForPerson: IntFilter
  coupangOutboundShippingTimeDay: IntFilter
  coupangSecretKey: StringFilter
  coupangUnionDeliveryType: StringFilter
  coupangUseType: StringFilter
  coupangVendorId: StringFilter
  defaultPrice: StringFilter
  defaultShippingFee: IntFilter
  descriptionShowTitle: StringFilter
  discountAmount: IntNullableFilter
  discountUnitType: StringNullableFilter
  esmplusAuctionId: StringFilter
  esmplusGmarketId: StringFilter
  esmplusMasterId: StringFilter
  exchangeShippingFee: IntFilter
  extraShippingFee: IntFilter
  fixImageBottom: StringNullableFilter
  fixImageSubBottom: StringNullableFilter
  fixImageSubTop: StringNullableFilter
  fixImageTop: StringNullableFilter
  gmarketFee: FloatFilter
  gmarketUseType: StringFilter
  interparkCertKey: StringFilter
  interparkEditCertKey: StringFilter
  interparkEditSecretKey: StringFilter
  interparkFee: FloatFilter
  interparkSecretKey: StringFilter
  interparkUseType: StringFilter
  lotteonApiKey: StringFilter
  lotteonFee: FloatFilter
  lotteonNormalFee: FloatFilter
  lotteonNormalUseType: StringFilter
  lotteonSellerType: StringFilter
  lotteonUseType: StringNullableFilter
  lotteonVendorId: StringFilter
  marginRate: FloatFilter
  marginUnitType: StringNullableFilter
  maxProductLimit: IntNullableFilter
  naverAutoSearchTag: StringFilter
  naverFee: FloatFilter
  naverOrigin: StringFilter
  naverOriginCode: StringFilter
  naverStoreOnly: StringFilter
  naverStoreUrl: StringFilter
  naverUseType: StringFilter
  optionAlignTop: StringFilter
  optionIndexType: IntFilter
  optionTwoWays: StringFilter
  orderToDeliveryMembership: StringFilter
  orderToDeliveryMethod: StringFilter
  orderToDeliveryName: StringFilter
  phone: StringNullableFilter
  productCollectCount: IntFilter
  refundShippingFee: IntFilter
  sillFromCategory: StringNullableFilter
  streetApiKey: StringFilter
  streetApiKey2: StringFilter
  streetApiKey3: StringFilter
  streetApiKey4: StringFilter
  streetApiMemo: StringFilter
  streetApiMemo2: StringFilter
  streetApiMemo3: StringFilter
  streetApiMemo4: StringFilter
  streetDefaultInbound: StringFilter
  streetDefaultOutbound: StringFilter
  streetFee: FloatFilter
  streetNormalApiKey: StringFilter
  streetNormalApiKey2: StringFilter
  streetNormalApiKey3: StringFilter
  streetNormalApiKey4: StringFilter
  streetNormalApiMemo: StringFilter
  streetNormalApiMemo2: StringFilter
  streetNormalApiMemo3: StringFilter
  streetNormalApiMemo4: StringFilter
  streetNormalFee: FloatFilter
  streetNormalInbound: StringNullableFilter
  streetNormalOutbound: StringNullableFilter
  streetNormalUseKeyType: StringFilter
  streetNormalUseType: StringFilter
  streetUseKeyType: StringFilter
  streetUseType: StringFilter
  thumbnailRepresentNo: StringNullableFilter
  tmonFee: FloatFilter
  tmonId: StringNullableFilter
  tmonUseType: StringFilter
  useDetailInformation: StringFilter
  user: UserWhereInput
  userId: IntFilter
  wemakepriceFee: FloatFilter
  wemakepriceId: StringFilter
  wemakepriceUseType: StringFilter
}

type UserLog {
  createdAt: DateTime!
  id: Int!
  isRead: Boolean!
  payloadData: String!
  title: String!
  user: User!
  userId: Int!
}

input UserLogListRelationFilter {
  every: UserLogWhereInput
  none: UserLogWhereInput
  some: UserLogWhereInput
}

input UserLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input UserLogOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  isRead: SortOrder
  payloadData: SortOrder
  title: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserLogWhereInput {
  AND: [UserLogWhereInput!]
  NOT: [UserLogWhereInput!]
  OR: [UserLogWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  isRead: BoolFilter
  payloadData: StringFilter
  title: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

input UserLogWhereUniqueInput {
  id: Int
}

enum UserLoginType {
  ADMIN
  EMAIL
  KAKAO
  NAVER
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  createdToken: SortOrder
  credit: SortOrder
  email: SortOrder
  id: SortOrder
  kakaoId: SortOrder
  master: SortOrder
  masterUserId: SortOrder
  naverId: SortOrder
  order: orderOrderByRelationAggregateInput
  password: SortOrder
  product: ProductOrderByRelationAggregateInput
  productStore: ProductStoreOrderByRelationAggregateInput
  purchaseLog: PurchaseLogOrderByRelationAggregateInput
  refAvailable: SortOrder
  refCode: SortOrder
  state: SortOrder
  token: SortOrder
  userInfo: UserInfoOrderByWithRelationInput
  userLog: UserLogOrderByRelationAggregateInput
  userQuestion: UserQuestionOrderByRelationAggregateInput
  verificationNumber: SortOrder
  wordTable: WordTableOrderByRelationAggregateInput
}

type UserPurchaseAdditionalInfo {
  expiredAt: DateTime!
  type: UserPurchaseAdditionalInfoEnumType!
}

enum UserPurchaseAdditionalInfoEnumType {
  IMAGE_TRANSLATE
  STOCK
}

type UserPurchaseInfo {
  additionalInfo: [UserPurchaseAdditionalInfo!]!
  history: String!
  level: Int!
  levelExpiredAt: DateTime!
}

type UserQuestion {
  answer: String
  answeredAt: DateTime
  attachmentFile: String
  attachmentFiles: [String!]!
  content: String!
  createdAt: DateTime!
  id: Int!
  isActive: Boolean!
  title: String!
  user: User!
  userId: Int!
}

input UserQuestionListRelationFilter {
  every: UserQuestionWhereInput
  none: UserQuestionWhereInput
  some: UserQuestionWhereInput
}

input UserQuestionOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input UserQuestionOrderByWithRelationInput {
  answer: SortOrder
  answeredAt: SortOrder
  attachmentFile: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  title: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserQuestionWhereInput {
  AND: [UserQuestionWhereInput!]
  NOT: [UserQuestionWhereInput!]
  OR: [UserQuestionWhereInput!]
  answer: StringNullableFilter
  answeredAt: DateTimeNullableFilter
  attachmentFile: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  isActive: BoolFilter
  title: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

input UserQuestionWhereUniqueInput {
  id: Int
}

enum UserSocialType {
  EMAIL
  KAKAO
  NAVER
}

enum UserState {
  ACTIVE
  DELETED
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  createdToken: DateTimeNullableFilter
  credit: IntFilter
  email: StringFilter
  id: IntFilter
  kakaoId: StringNullableFilter
  master: IntFilter
  masterUserId: IntNullableFilter
  naverId: StringNullableFilter
  order: OrderListRelationFilter
  password: StringFilter
  product: ProductListRelationFilter
  productStore: ProductStoreListRelationFilter
  purchaseLog: PurchaseLogListRelationFilter
  refAvailable: BoolFilter
  refCode: StringNullableFilter
  state: EnumUserStateFilter
  token: StringNullableFilter
  userInfo: UserInfoWhereInput
  userLog: UserLogListRelationFilter
  userQuestion: UserQuestionListRelationFilter
  verificationNumber: StringFilter
  wordTable: WordTableListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  kakaoId: String
  naverId: String
  token: String
}

type WordTable {
  findWord: String!
  id: Int!
  replaceWord: String
  user: User!
  userId: Int!
}

input WordTableListRelationFilter {
  every: WordTableWhereInput
  none: WordTableWhereInput
  some: WordTableWhereInput
}

input WordTableOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input WordTableOrderByWithRelationInput {
  findWord: SortOrder
  id: SortOrder
  replaceWord: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input WordTableUQ_word_table_wordCompoundUniqueInput {
  findWord: String!
  userId: Int!
}

input WordTableWhereInput {
  AND: [WordTableWhereInput!]
  NOT: [WordTableWhereInput!]
  OR: [WordTableWhereInput!]
  findWord: StringFilter
  id: IntFilter
  replaceWord: StringNullableFilter
  user: UserWhereInput
  userId: IntFilter
}

input WordTableWhereUniqueInput {
  UQ_word_table_word: WordTableUQ_word_table_wordCompoundUniqueInput
  id: Int
}

input newOrderInput {
  deliveryFeeAmt: Int!
  individualCustomUniqueCode: String
  marketCode: String!
  orderMemberName: String!
  orderMemberTelNo: String!
  orderNo: String!
  orderQuantity: Int!
  productName: String!
  productOptionContents: String
  productOrderMemo: String
  productPayAmt: Int!
  receiverIntegratedAddress: String!
  receiverName: String!
  receiverTelNo1: String!
  receiverZipCode: String!
  sellerProductManagementCode: String
  taobaoOrderNo: String
}

type order {
  deliveryFeeAmt: Int!
  id: Int!
  individualCustomUniqueCode: String
  marketCode: String!
  orderMemberName: String!
  orderMemberTelNo: String!
  orderNo: String!
  orderQuantity: Int!
  orderStateEnum: orderStateEnum!
  productId: Int
  productName: String!
  productOptionContents: String
  productOrderMemo: String
  productPayAmt: Int!
  receiverIntegratedAddress: String!
  receiverName: String!
  receiverTelNo1: String!
  receiverZipCode: String!
  sellerProductManagementCode: String
  state: Int!
  taobaoOrderNo: String
  userId: Int!
}

input orderMarketCode_UNIQUECompoundUniqueInput {
  marketCode: String!
  orderNo: String!
}

input orderOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input orderOrderByWithRelationInput {
  deliveryFeeAmt: SortOrder
  id: SortOrder
  individualCustomUniqueCode: SortOrder
  marketCode: SortOrder
  orderMemberName: SortOrder
  orderMemberTelNo: SortOrder
  orderNo: SortOrder
  orderQuantity: SortOrder
  orderStateEnum: orderStateEnumOrderByWithRelationInput
  productId: SortOrder
  productName: SortOrder
  productOptionContents: SortOrder
  productOrderMemo: SortOrder
  productPayAmt: SortOrder
  receiverIntegratedAddress: SortOrder
  receiverName: SortOrder
  receiverTelNo1: SortOrder
  receiverZipCode: SortOrder
  sellerProductManagementCode: SortOrder
  state: SortOrder
  taobaoOrderNo: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

type orderStateEnum {
  description: String
  id: Int!
  name: String!
}

input orderStateEnumOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  order: orderOrderByRelationAggregateInput
}

input orderStateEnumWhereInput {
  AND: [orderStateEnumWhereInput!]
  NOT: [orderStateEnumWhereInput!]
  OR: [orderStateEnumWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  order: OrderListRelationFilter
}

input orderWhereInput {
  AND: [orderWhereInput!]
  NOT: [orderWhereInput!]
  OR: [orderWhereInput!]
  deliveryFeeAmt: IntFilter
  id: IntFilter
  individualCustomUniqueCode: StringNullableFilter
  marketCode: StringFilter
  orderMemberName: StringFilter
  orderMemberTelNo: StringFilter
  orderNo: StringFilter
  orderQuantity: IntFilter
  orderStateEnum: orderStateEnumWhereInput
  productId: IntNullableFilter
  productName: StringFilter
  productOptionContents: StringNullableFilter
  productOrderMemo: StringNullableFilter
  productPayAmt: IntFilter
  receiverIntegratedAddress: StringFilter
  receiverName: StringFilter
  receiverTelNo1: StringFilter
  receiverZipCode: StringFilter
  sellerProductManagementCode: StringNullableFilter
  state: IntFilter
  taobaoOrderNo: StringNullableFilter
  user: UserWhereInput
  userId: IntFilter
}

input orderWhereUniqueInput {
  id: Int
  marketCode_UNIQUE: orderMarketCode_UNIQUECompoundUniqueInput
}

type productStateEnum {
  id: Int!
  state: String
}

input productStateEnumOrderByWithRelationInput {
  id: SortOrder
  product: ProductOrderByRelationAggregateInput
  state: SortOrder
}

input productStateEnumWhereInput {
  AND: [productStateEnumWhereInput!]
  NOT: [productStateEnumWhereInput!]
  OR: [productStateEnumWhereInput!]
  id: IntFilter
  product: ProductListRelationFilter
  state: StringNullableFilter
}

type productStoreLogEnum {
  id: Int!
  state: String
}

input productStoreLogEnumOrderByWithRelationInput {
  id: SortOrder
  productStoreLog: ProductStoreLogOrderByRelationAggregateInput
  state: SortOrder
}

input productStoreLogEnumWhereInput {
  AND: [productStoreLogEnumWhereInput!]
  NOT: [productStoreLogEnumWhereInput!]
  OR: [productStoreLogEnumWhereInput!]
  id: IntFilter
  productStoreLog: ProductStoreLogListRelationFilter
  state: StringNullableFilter
}

type productViewLog {
  clientIp: String!
  id: Int!
  productStoreId: Int!
  siteCode: String!
  viewTime: DateTime!
}

input productViewLogOrderByRelationAggregateInput {
  _count: SortOrder
  count: SortOrder
}

input productViewLogWhereInput {
  AND: [productViewLogWhereInput!]
  NOT: [productViewLogWhereInput!]
  OR: [productViewLogWhereInput!]
  clientIp: StringFilter
  id: IntFilter
  product: ProductWhereInput
  productId: IntFilter
  productStoreId: IntFilter
  product_store: ProductStoreWhereInput
  siteCode: StringFilter
  userId: IntFilter
  viewTime: DateTimeFilter
}

input purchaseInputs {
  expiredAt: DateTime!
  planInfoId: Int!
  userId: Int!
}

input setProductOption {
  defaultShippingFee: Int!
  isActive: Boolean!
  name: String!
  optionString: String!
  optionValue1Id: Int!
  optionValue2Id: Int
  optionValue3Id: Int
  optionValue4Id: Int
  optionValue5Id: Int
  price: Int!
  priceCny: Float!
  productId: Int!
  stock: Int
  taobaoSkuId: String!
}

input sillCodeInput {
  categoryCode: String!
  sillCode: String!
}

type testType {
  optionvalues: [String]
  productId: Int
  thumbnails: [String]
}
